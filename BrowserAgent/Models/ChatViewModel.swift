import Foundation
import Combine

class ChatViewModel: ObservableObject {
    @Published var messages: [Message] = []
    @Published var inputMessage: String = ""
    @Published var isLoading: Bool = false
    @Published var error: String? = nil
    @Published var selectedModel: AIModel = AIModel.defaultModel
    @Published var apiKey: String = ""
    
    private let browserUseManager = BrowserUseManager()
    private var cancellables = Set<AnyCancellable>()
    
    init() {
        // –î–µ–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        #if DEBUG
        messages = Message.sampleMessages
        #endif
        
        // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—å –Ω–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        browserUseManager.$isAgentRunning
            .sink { [weak self] isRunning in
                self?.isLoading = isRunning
            }
            .store(in: &cancellables)
        
        browserUseManager.$state
            .sink { [weak self] state in
                if case let .error(message) = state {
                    self?.error = message
                }
            }
            .store(in: &cancellables)
        
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–ª—é—á API –∑ UserDefaults, —è–∫—â–æ –≤—ñ–Ω —î
        loadAPIKey()
    }
    
    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è Python
    func testPythonConnection() {
        isLoading = true
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î API –∫–ª—é—á
        if apiKey.isEmpty {
            isLoading = false
            let message = Message(role: .assistant, content: "‚ö†Ô∏è –ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ API –∫–ª—é—á. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å API –∫–ª—é—á –ø–µ—Ä–µ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è–º —Ç–µ—Å—Ç—É.")
            messages.append(message)
            return
        }
        
        DispatchQueue.global(qos: .userInitiated).async { [weak self] in
            let result = self?.browserUseManager.testPythonConnection() ?? "–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"
            
            DispatchQueue.main.async {
                self?.isLoading = false
                let message = Message(role: .assistant, content: "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç—É Python:\n\n\(result)")
                self?.messages.append(message)
            }
        }
    }
    
    func sendMessage() {
        guard !inputMessage.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty else { return }
        
        let userMessage = Message(role: .user, content: inputMessage)
        messages.append(userMessage)
        
        let storedInput = inputMessage
        inputMessage = ""
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è Python –∞–±–æ API –∫–ª—é—á–∞
        if storedInput.lowercased().contains("—Ç–µ—Å—Ç") && 
           (storedInput.lowercased().contains("python") || 
            storedInput.lowercased().contains("–ø–∞–π—Ç–æ–Ω") || 
            storedInput.lowercased().contains("api") || 
            storedInput.lowercased().contains("key") || 
            storedInput.lowercased().contains("–∫–ª—é—á")) {
            testPythonConnection()
            return
        }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å API –∫–ª—é—á–∞
        if apiKey.isEmpty {
            let assistantMessage = Message(role: .assistant, content: "‚ö†Ô∏è –ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ API –∫–ª—é—á. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ —ñ–∫–æ–Ω–∫—É –∫–ª—é—á–∞ üîë —É –≤–µ—Ä—Ö–Ω—å–æ–º—É –ø—Ä–∞–≤–æ–º—É –∫—É—Ç—ñ –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è API –∫–ª—é—á–∞.")
            messages.append(assistantMessage)
            return
        }
        
        // –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –¥—ñ—é –≤ –±—Ä–∞—É–∑–µ—Ä—ñ –∞–±–æ –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        // –£ –ø–æ–≤–Ω—ñ–π —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ç—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        let isActionRequired = storedInput.lowercased().contains("–≤—ñ–¥–∫—Ä–∏–π") || 
                            storedInput.lowercased().contains("–∑–Ω–∞–π–¥–∏") ||
                            storedInput.lowercased().contains("–ø–µ—Ä–µ–π–¥–∏")
        
        if isActionRequired && !browserUseManager.isAgentRunning {
            let assistantThinkingMessage = Message(role: .assistant, content: "–í–∏–∫–æ–Ω—É—é –∑–∞–≤–¥–∞–Ω–Ω—è –≤ –±—Ä–∞—É–∑–µ—Ä—ñ...")
            messages.append(assistantThinkingMessage)
            
            // –ó–∞–ø—É—Å–∫–∞—î–º–æ browser-use –∞–≥–µ–Ω—Ç–∞
            browserUseManager.runAgent(
                task: storedInput,
                model: selectedModel,
                apiKey: apiKey,
                messages: Array(messages.dropLast())
            )
        } else {
            // –í —Ä–µ–∞–ª—å–Ω—ñ–π —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ç—É—Ç –±—É–¥–µ –≤–∏–∫–ª–∏–∫ AI API –¥–ª—è –∑–≤–∏—á–∞–π–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            simulateAIResponse(to: storedInput)
        }
    }
    
    func stopAgent() {
        browserUseManager.stopAgent()
    }
    
    private func simulateAIResponse(to message: String) {
        isLoading = true
        
        // –Ü–º—ñ—Ç—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å AI
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) { [weak self] in
            guard let self = self else { return }
            
            let response: String
            if message.lowercased().contains("–ø—Ä–∏–≤—ñ—Ç") {
                response = "–ü—Ä–∏–≤—ñ—Ç! –Ø –≤–∞—à –±—Ä–∞—É–∑–µ—Ä–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç. –ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ? –ú–æ–∂—É –≤–∏–∫–æ–Ω–∞—Ç–∏ –¥—ñ—ó –≤ –±—Ä–∞—É–∑–µ—Ä—ñ –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º."
            } else {
                response = "–Ø –∑—Ä–æ–∑—É–º—ñ–≤ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –©–æ–± —è –º—ñ–≥ –≤–∏–∫–æ–Ω–∞—Ç–∏ –¥—ñ—ó –≤ –±—Ä–∞—É–∑–µ—Ä—ñ, —Å–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏ —Ç–∏–ø—É '–≤—ñ–¥–∫—Ä–∏–π', '–∑–Ω–∞–π–¥–∏' –∞–±–æ '–ø–µ—Ä–µ–π–¥–∏ –Ω–∞ —Å–∞–π—Ç'."
            }
            
            let assistantMessage = Message(role: .assistant, content: response)
            self.messages.append(assistantMessage)
            self.isLoading = false
        }
    }
    
    // MARK: - API Key Management
    
    func saveAPIKey() {
        UserDefaults.standard.set(apiKey, forKey: "apiKey_\(selectedModel.provider.rawValue)")
    }
    
    func loadAPIKey() {
        if let savedKey = UserDefaults.standard.string(forKey: "apiKey_\(selectedModel.provider.rawValue)") {
            apiKey = savedKey
        }
    }
    
    func clearAPIKey() {
        apiKey = ""
        UserDefaults.standard.removeObject(forKey: "apiKey_\(selectedModel.provider.rawValue)")
    }
} 